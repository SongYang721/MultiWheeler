@page "/cmds/edit"
@using Microsoft.EntityFrameworkCore
@using MultiWheeler.Domain
@inject IDbContextFactory<MultiWheeler.Data.MultiWheelerContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>CMD</h2>
<hr />
@if (CMD is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="CMD" OnValidSubmit="UpdateCMD" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="CMD.CMDId" value="@CMD.CMDId" />
                <div class="mb-3">
                    <label for="commandid" class="form-label">CommandId:</label>
                    <InputText id="commandid" @bind-Value="CMD.CommandId" class="form-control" />
                    <ValidationMessage For="() => CMD.CommandId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cmdtype" class="form-label">CmdType:</label>
                    <InputText id="cmdtype" @bind-Value="CMD.CmdType" class="form-control" />
                    <ValidationMessage For="() => CMD.CmdType" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="batteryid" class="form-label">BatteryId:</label>
                    <InputNumber id="batteryid" @bind-Value="CMD.BatteryId" class="form-control" />
                    <ValidationMessage For="() => CMD.BatteryId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/cmds">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CMDId { get; set; }

    [SupplyParameterFromForm]
    private CMD? CMD { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        CMD ??= await context.CMD.FirstOrDefaultAsync(m => m.CMDId == CMDId);

        if (CMD is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCMD()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(CMD!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CMDExists(CMD!.CMDId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/cmds");
    }

    private bool CMDExists(int cmdid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.CMD.Any(e => e.CMDId == cmdid);
    }
}
